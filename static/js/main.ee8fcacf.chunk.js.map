{"version":3,"sources":["components/CityInfo.jsx","components/HomePage.jsx","App.js","reportWebVitals.js","index.js"],"names":["CityInfo","props","state","hits","estpop","country","worldregion","zip","long","lat","componentDidMount","bind","input","zipcode","undefined","this","match","params","axios","get","payload","console","log","setState","data","State","EstimatedPopulation","Country","WorldRegion","Zipcode","Long","Lat","error","id","type","placeholder","onClick","document","getElementById","value","map","cityData","index","LocationText","Component","HomePage","App","to","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"uUAkEeA,E,kDA9DX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTA,MAAO,GACPC,KAAM,GACNC,OAAQ,GACRC,QAAS,GACTC,YAAa,GACbC,IAAK,GACLC,KAAM,GACNC,IAAK,IAGT,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBAbX,E,uGAgBMC,G,gFAChBC,OAAqBC,IAAVF,EAAsBG,KAAKd,MAAMe,MAAMC,OAAOJ,QAAUD,E,kBAE/CM,IAAMC,IAAN,gDAAmDN,I,OAAnEO,E,OACJC,QAAQC,IAAIF,GACZL,KAAKQ,SAAS,CACVpB,KAAMiB,EAAQI,KACdtB,MAAOkB,EAAQI,KAAK,GAAGC,MACvBrB,OAAQgB,EAAQI,KAAK,GAAGE,oBACxBrB,QAASe,EAAQI,KAAK,GAAGG,QACzBrB,YAAac,EAAQI,KAAK,GAAGI,YAC7BrB,IAAKa,EAAQI,KAAK,GAAGK,QACrBrB,KAAMY,EAAQI,KAAK,GAAGM,KACtBrB,IAAKW,EAAQI,KAAK,GAAGO,M,gDAGzBV,QAAQW,MAAR,M,+IAIC,IAAD,OACJ,OACI,gCACI,uBAAOC,GAAG,QAAQC,KAAM,OAAOC,YAAc,oBAC7C,wBAAQC,QAAS,kBAAM,EAAK1B,kBAAkB2B,SAASC,eAAe,SAASC,QAA/E,oBACA,yCAAYxB,KAAKb,MAAMA,MAAvB,OACA,0CACCa,KAAKb,MAAMC,KAAKqC,KAAI,SAACC,EAAUC,GAAX,OACjB,8BACKD,EAASE,cADJD,MAId,uBACA,yDAC2B3B,KAAKb,MAAME,OADtC,IAC8C,uBAD9C,YAEcW,KAAKb,MAAMG,QAFzB,IAEkC,uBAFlC,gBAGkBU,KAAKb,MAAMI,YAH7B,IAG0C,uBAH1C,YAIcS,KAAKb,MAAMK,IAJzB,IAI8B,uBAJ9B,cAKgBQ,KAAKb,MAAMM,KAL3B,IAKiC,uBALjC,aAMeO,KAAKb,MAAMO,IAN1B,IAM+B,iC,GAxDxBmC,aCORC,EARE,kBACf,gCACE,oEACA,+ICEiBC,E,kDACnB,WAAY7C,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,KAAM,IAHQ,E,qDAQhB,OACE,cAAC,IAAD,UACE,gCACE,6BACE,6BAAI,cAAC,IAAD,CAAM4C,GAAG,IAAT,0BAEN,uBAEA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWL,IACjC,cAAC,IAAD,CAAOI,KAAK,YAAYC,UAAWlD,gB,GAnBd4C,aCKlBO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzB,SAASC,eAAe,SAM1Ba,M","file":"static/js/main.ee8fcacf.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass CityInfo extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            state: '',          \r\n            hits: [],\r\n            estpop: \"\",\r\n            country: \"\",\r\n            worldregion: \"\",\r\n            zip: \"\",\r\n            long: \"\",\r\n            lat: \"\",\r\n        };\r\n\r\n        this.componentDidMount = this.componentDidMount.bind(this);\r\n    }\r\n\r\n    async componentDidMount(input) {\r\n        let zipcode = (input === undefined ? this.props.match.params.zipcode : input)\r\n        try {\r\n            let payload = await axios.get(`https://ctp-zip-api.herokuapp.com/zip/${zipcode}`);\r\n            console.log(payload)\r\n            this.setState({\r\n                hits: payload.data,\r\n                state: payload.data[0].State,\r\n                estpop: payload.data[0].EstimatedPopulation,\r\n                country: payload.data[0].Country,\r\n                worldregion: payload.data[0].WorldRegion,\r\n                zip: payload.data[0].Zipcode,\r\n                long: payload.data[0].Long,\r\n                lat: payload.data[0].Lat,\r\n            });\r\n        } catch (error){\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <input id=\"input\" type= \"text\" placeholder = \"Enter a zipcode\"/> \r\n                <button onClick={() => this.componentDidMount(document.getElementById(\"input\").value)}>Submit</button>\r\n                <h1>State: {this.state.state} </h1>\r\n                <h2>Cities: </h2> \r\n                {this.state.hits.map((cityData, index) => (\r\n                    <div key={index}>\r\n                        {cityData.LocationText}\r\n                    </div>\r\n                ))}\r\n                <br/>\r\n                <div>\r\n                    Estimated Population: {this.state.estpop} <br/>\r\n                    Country: {this.state.country} <br/>\r\n                    WorldRegion: {this.state.worldregion} <br/>\r\n                    Zipcode: {this.state.zip} <br/>\r\n                    Longitude: {this.state.long} <br/>\r\n                    Latitude: {this.state.lat} <br/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CityInfo;","import React from 'react';\r\n\r\nconst HomePage = () => (\r\n  <div>\r\n    <h1>This is the homepage on zip-search</h1>\r\n    <p>Search in the url a zip code as follows: \"/00000\" and youll get a \r\n      list of cities related to that zip code!</p>\r\n  </div>\r\n);\r\n\r\nexport default HomePage","import { Component } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport './App.css';\r\n\r\nimport CityInfo from './components/CityInfo'\r\nimport HomePage from './components/HomePage'\r\n\r\nexport default class App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      hits: [],\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <ul>\r\n            <li><Link to='/'>HomePage</Link></li>\r\n          </ul>\r\n          <hr />\r\n\r\n          <Switch>\r\n            <Route exact path='/' component={HomePage} />\r\n            <Route path='/:zipcode' component={CityInfo} />\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    )\r\n  }\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}